---
layout:     post
title:      "Deep Learning Compiler"
subtitle:   " \"当前研究现状，未来发展方向\""
date:       2019-12-01 11：43
author:     "Jack-C"
header-img: "img/post-bg-DL.jpg"
catalog: true
tags:
    - DL
    - Compiler
    - 科研
---

## Deep  Learning Compiler 调研1



### 1、为什么需要DL Compiler ？

答：传统的compiler因为具有较强的**通用性**，所以编译的性能没有充分发挥出来，（**高效性和通用性不可兼得**）

所以提出针对DL框架的编译器，旨在发挥更高的性能；

打个比方，虽然传统的PC机器可以用来挖矿，但是计算机的通用性导致只有一小部分性能被发挥出来，所以现在大多使用ASIC矿机进行挖矿，效率更高。

### 2、DL Compiler 和DL框架有什么区别？

- DL框架究竟是什么？

  答：简单来说就是库，通过形如：import tensorflow引入；深度解析见：<a href="https://blog.csdn.net/yeler082/article/details/78755095">链接</a>

- DL Compiler 与DL框架相比，优势

  答：编译器可以带来的更多自动化，并且TVM已经超过人工优化的传统方法。

  - 无限的算力和有限的精力 
  - 是自动化后的编译器可以直接去考虑更大的解决空间，去自动选择更加高效的数据排布或者算子融合
  - 编译器和手工优化结合 ：编译的目标并非替代手工优化，而是吸收手工优化的经验，使得优化更加自动化

### 3、深度学习编译和传统编译的技术路线差别

- 优化方面：
  - 传统编译器：注重于优化寄存器使用和指令集匹配，其优化往往偏向于**局部**
  - 深度学习编译器：优化往往需要涉及到**全局**的改写，包括之前提到的内存，算子融合等。目前深度学习框架的图优化或者高层优化（HLO）部分和传统编译的pass比较匹配，这些优化也会逐渐被标准的pass所替代。但是在高层还会有开放的问题，即高层的抽象如何可以做到容易分析又有足够的表达能力。TVM的Relay，XLA和Glow是三个在这个方向上的例子。
- 自动代码生成方面：
  - 传统编译器：生成比较优化的通用代码
  - 深度学习编译器：生成接近手写或者更加高效的特定代码（卷积，矩阵乘法等）
  - 一些情况下深度学习编译器可以花费更多的时间去寻找这些解决方案



### 4、整数集分析和Polyhedral Model







